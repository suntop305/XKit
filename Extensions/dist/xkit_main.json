{"id":"xkit_main","script":"//* TITLE XKit Main **//\n//* VERSION 1.3.4 **//\n//* DESCRIPTION Boots XKit up **//\n//* DEVELOPER STUDIOXENIX **//\n(function() {\n\tif (typeof XKit.extensions.xkit_main !== \"undefined\") { return; }\n\tXKit.extensions.xkit_main = new Object({\n\n\t\trunning: false,\n\t\tenabled_extensions: \"\",\n\t\tdisabled_extensions: \"\",\n\t\tto_run: \"\",\n\t\tto_run_count: 0,\n\n\t\trun: function() {\n\n\t\t\tif (typeof document.location.href !== \"undefined\") {\n\n\t\t\t\tif (document.location.href.indexOf(\"www.tumblr.com/login\") !== -1 || document.location.href.indexOf(\"www.tumblr.com/settings\") !== -1) {\n\t\t\t\t\tconsole.log(\"Refusing to run XKit, login or settings page!\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (XKit.extensions.xkit_main.running === true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.running = true;\n\n\t\t\tXKit.console.add(\"Welcome from XKit Main \" + XKit.installed.version('xkit_main'));\n\n\t\t\t// Run XKit Patches first.\n\t\t\tif (XKit.flags.do_not_load_xkit_patches !== true) {\n\n\t\t\t\tvar m_result = XKit.extensions.xkit_main.run_extension(\"xkit_patches\", true, true);\n\t\t\t\tif (m_result === false) {\n\t\t\t\t\tXKit.console.add(\"Can not run xkit_patches! (version \" + XKit.installed.version('xkit_patches') + \")\");\n\t\t\t\t} else {\n\t\t\t\t\tXKit.console.add(\"Running xkit_patches (version \" + XKit.installed.version('xkit_patches') + \")\");\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tXKit.console.add(\"Skipping xkit_patches (flag on)\");\n\n\t\t\t}\n\n\t\t\t// Get currently running extensions.\n\t\t\tXKit.extensions.xkit_main.to_run = XKit.installed.list();\n\n\t\t\tif (XKit.extensions.xkit_main.should_slow_down() === true) {\n\t\t\t\tXKit.console.add(\"XKit Main: Slow-boot mode\");\n\t\t\t\t$(document).ready(function() {\n\t\t\t\t\tsetTimeout(function() { XKit.extensions.xkit_main.run_next_extension(); }, 300);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tXKit.console.add(\"XKit Main: Fast-boot mode\");\n\t\t\t\tsetTimeout(function() { XKit.extensions.xkit_main.run_next_extension(); }, 1);\n\t\t\t}\n\n\t\t},\n\n\t\tshould_slow_down: function() {\n\n\t\t\tif (document.location.href.indexOf(':\t//www.tumblr.com/new/') !== -1) { return true; }\n\n\t\t\tif (document.location.href.substring(0, 27) === \":\t//www.tumblr.com/blog/\") {\n\t\t\t\tif (document.location.href.indexOf('/new/') !== -1) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\trun_next_extension: function() {\n\t\t\tXKit.extensions.xkit_main.to_run_count++;\n\t\t\tif (XKit.extensions.xkit_main.to_run_count < XKit.extensions.xkit_main.to_run.length) {\n\t\t\t\tXKit.extensions.xkit_main.run_extension(XKit.extensions.xkit_main.to_run[XKit.extensions.xkit_main.to_run_count]);\n\t\t\t} else {\n\t\t\t\tXKit.console.add(\"Enabled extensions: \" + XKit.extensions.xkit_main.enabled_extensions);\n\t\t\t\tXKit.console.add(\"Disabled extensions: \" + XKit.extensions.xkit_main.disabled_extensions);\n\t\t\t\tXKit.post_listener.check();\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t// defined in xkit.js\n\t\t\t\t\t/* globals xkit_global_start */\n\t\t\t\t\tvar diff = new Date().getTime() - xkit_global_start;\n\t\t\t\t\tXKit.console.add(\"Booted XKit up in \" + diff + \" milliseconds.\");\n\t\t\t\t}, 1);\n\t\t\t}\n\t\t},\n\n\t\trun_extension: function(extension_id, force, dont_run_next) {\n\n\t\t\t// We don't want an infinite loop now do we?\n\t\t\tif (extension_id === \"xkit_main\") { XKit.extensions.xkit_main.run_next_extension(); return; }\n\n\t\t\t// Just in case..\n\t\t\tif (extension_id === \"xkit_installer\" && force !== true) { XKit.extensions.xkit_main.run_next_extension(); return; }\n\n\t\t\t// We'll be running patches first.\n\t\t\tif (extension_id === \"xkit_patches\" && force !== true) { XKit.extensions.xkit_main.run_next_extension(); return; }\n\n\t\t\tvar xkit_main = XKit.installed.get(extension_id);\n\n\t\t\t// Check if in Frame Mode.\n\t\t\tif (XKit.frame_mode === true && extension_id !== \"xkit_patches\") {\n\t\t\t\t// This is ugly: I don't want to eval script.\n\t\t\t\teval(xkit_main.script + \"\\n//# sourceURL=xkit/\" + extension_id + \".js\");\n\t\t\t\tvar frame_script = \"\";\n\t\t\t\ttry {\n\t\t\t\t\tframe_script = XKit.extensions[extension_id].frame_run;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tXKit.console.add(\"No frame_run on \" + extension_id);\n\t\t\t\t}\n\t\t\t\tif (frame_script !== \"\" && typeof frame_script !== \"undefined\") {\n\t\t\t\t\t// This is a hybrid extension!\n\t\t\t\t\t// Run it!\n\t\t\t\t\tif (XKit.installed.enabled(extension_id) === true) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (typeof XKit.extensions[extension_id].preferences !== \"undefined\") {\n\t\t\t\t\t\t\t\tXKit.extensions.xkit_main.load_extension_preferences(extension_id);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tXKit.extensions[extension_id].frame_run();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tXKit.console.add(\"Can not run \" + extension_id + \": \" + e.message);\n\t\t\t\t\t\t\tXKit.extensions.xkit_main.run_next_extension(); return;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!dont_run_next) {\n\t\t\t\t\t\tXKit.extensions.xkit_main.run_next_extension();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (xkit_main.frame !== true) {\n\t\t\t\t\t// not a frame extension, quit.\n\t\t\t\t\tif (XKit.extensions.xkit_main.disabled_extensions === \"\") {\n\t\t\t\t\t\tXKit.extensions.xkit_main.disabled_extensions = extension_id + \"(in frame)\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tXKit.extensions.xkit_main.disabled_extensions = XKit.extensions.xkit_main.disabled_extensions + \", \" + extension_id + \"(in frame)\";\n\t\t\t\t\t}\n\t\t\t\t\tif (!dont_run_next) {\n\t\t\t\t\t\tXKit.extensions.xkit_main.run_next_extension();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (xkit_main.frame === true) {\n\t\t\t\t\t// is a frame extension, quit.\n\t\t\t\t\ttry {\n\t\t\t\t\t\teval(xkit_main.script + \"\\n//# sourceURL=xkit/\" + extension_id + \".js\");\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tXKit.console.add(\"Can't eval \" + extension_id);\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (typeof XKit.extensions[extension_id].preferences !== \"undefined\") {\n\t\t\t\t\t\t\tXKit.extensions.xkit_main.load_extension_preferences(extension_id);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tXKit.console.add(\"Failed to load preferences for \" + extension_id + \": \" + e.message);\n\t\t\t\t\t}\n\t\t\t\t\tif (XKit.extensions.xkit_main.disabled_extensions === \"\") {\n\t\t\t\t\t\tXKit.extensions.xkit_main.disabled_extensions = extension_id + \"(not in frame)\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tXKit.extensions.xkit_main.disabled_extensions = XKit.extensions.xkit_main.disabled_extensions + \", \" + extension_id + \"(not in frame)\";\n\t\t\t\t\t}\n\t\t\t\t\tif (!dont_run_next) {\n\t\t\t\t\t\tXKit.extensions.xkit_main.run_next_extension();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\teval(xkit_main.script + \"\\n//# sourceURL=xkit/\" + extension_id + \".js\");\n\t\t\t\tif (XKit.installed.enabled(extension_id) === true) {\n\t\t\t\t\tif (XKit.extensions.xkit_main.enabled_extensions === \"\") {\n\t\t\t\t\t\tXKit.extensions.xkit_main.enabled_extensions = extension_id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tXKit.extensions.xkit_main.enabled_extensions = XKit.extensions.xkit_main.enabled_extensions + \", \" + extension_id;\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (typeof XKit.extensions[extension_id].preferences !== \"undefined\") {\n\n\t\t\t\t\t\t\tXKit.extensions.xkit_main.load_extension_preferences(extension_id);\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tXKit.extensions[extension_id].run();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tXKit.console.add(\"Can not run \" + extension_id + \": \" + e.message);\n\t\t\t\t\t\tXKit.extensions.xkit_main.run_next_extension(); return;\n\t\t\t\t\t}\n\t\t\t\t\tif (!dont_run_next) {\n\t\t\t\t\t\tXKit.extensions.xkit_main.run_next_extension();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tif (XKit.extensions.xkit_main.disabled_extensions === \"\") {\n\t\t\t\t\t\tXKit.extensions.xkit_main.disabled_extensions = extension_id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tXKit.extensions.xkit_main.disabled_extensions = XKit.extensions.xkit_main.disabled_extensions + \", \" + extension_id;\n\t\t\t\t\t}\n\t\t\t\t\tif (!dont_run_next) {\n\t\t\t\t\t\tXKit.extensions.xkit_main.run_next_extension();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (XKit.extensions.xkit_main.disabled_extensions === \"\") {\n\t\t\t\t\tXKit.extensions.xkit_main.disabled_extensions = extension_id + \"(error)\";\n\t\t\t\t} else {\n\t\t\t\t\tXKit.extensions.xkit_main.disabled_extensions = XKit.extensions.xkit_main.disabled_extensions + \", \" + extension_id + \"(error)\";\n\t\t\t\t}\n\t\t\t\t// defined in xkit.js\n\t\t\t\t/* globals show_error_reset */\n\t\t\t\tshow_error_reset(\"Can't run \" + extension_id + \":\" + e.message);\n\t\t\t\tif (!dont_run_next) {\n\t\t\t\t\tXKit.extensions.xkit_main.run_next_extension();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t},\n\n\t\tload_extension_preferences: function(extension_id) {\n\n\t\t\tfor (var pref in XKit.extensions[extension_id].preferences) {\n\n\t\t\t\tif (typeof XKit.extensions[extension_id].preferences[pref].type === \"undefined\" ||  XKit.extensions[extension_id].preferences[pref].type === \"\" || XKit.extensions[extension_id].preferences[pref].type === \"checkbox\") {\n\t\t\t\t\tXKit.extensions[extension_id].preferences[pref].value = XKit.storage.get(extension_id, \"extension__setting__\" + pref, \"\");\n\t\t\t\t\tif ( XKit.extensions[extension_id].preferences[pref].value === \"\") {\n\t\t\t\t\t\tif (typeof XKit.extensions[extension_id].preferences[pref].default !== \"undefined\") {\n\t\t\t\t\t\t\tXKit.extensions[extension_id].preferences[pref].value = XKit.extensions[extension_id].preferences[pref].default;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tXKit.extensions[extension_id].preferences[pref].value = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (XKit.extensions[extension_id].preferences[pref].value === \"true\") {\n\t\t\t\t\t\t\tXKit.extensions[extension_id].preferences[pref].value = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tXKit.extensions[extension_id].preferences[pref].value = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (XKit.extensions[extension_id].preferences[pref].type === \"text\") {\n\t\t\t\t\tXKit.extensions[extension_id].preferences[pref].value = XKit.storage.get(extension_id, \"extension__setting__\" + pref, \"\");\n\t\t\t\t\tif (typeof XKit.extensions[extension_id].preferences[pref].value === \"undefined\" || XKit.extensions[extension_id].preferences[pref].value === \"\") {\n\t\t\t\t\t\tif (typeof XKit.extensions[extension_id].preferences[pref].default !== \"undefined\") {\n\t\t\t\t\t\t\tXKit.extensions[extension_id].preferences[pref].value = XKit.extensions[extension_id].preferences[pref].default;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (XKit.extensions[extension_id].preferences[pref].type === \"combo\") {\n\t\t\t\t\tXKit.extensions[extension_id].preferences[pref].value = XKit.storage.get(extension_id, \"extension__setting__\" + pref, \"\");\n\t\t\t\t\tif (typeof XKit.extensions[extension_id].preferences[pref].value === \"undefined\" || XKit.extensions[extension_id].preferences[pref].value === \"\") {\n\t\t\t\t\t\tif (typeof XKit.extensions[extension_id].preferences[pref].default !== \"undefined\") {\n\t\t\t\t\t\t\tXKit.extensions[extension_id].preferences[pref].value = XKit.extensions[extension_id].preferences[pref].default;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (XKit.extensions[extension_id].preferences[pref].type === \"blog\") {\n\t\t\t\t\tXKit.extensions[extension_id].preferences[pref].value = XKit.storage.get(extension_id, \"extension__setting__\" + pref, \"\");\n\t\t\t\t\tif (typeof XKit.extensions[extension_id].preferences[pref].value === \"undefined\" || XKit.extensions[extension_id].preferences[pref].value === \"\") {\n\t\t\t\t\t\tif (typeof XKit.extensions[extension_id].preferences[pref].default !== \"undefined\") {\n\t\t\t\t\t\t\tXKit.extensions[extension_id].preferences[pref].value = XKit.extensions[extension_id].preferences[pref].default;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tXKit.extensions[extension_id].preferences[pref].value = XKit.extensions[extension_id].preferences[pref].value.substring(1, XKit.extensions[extension_id].preferences[pref].value.length - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t},\n\n\t\tdestroy: function() {\n\t\t\tthis.running = false;\n\t\t}\n\n\t});\n}());\n","file":"found","server":"up","errors":false,"title":"XKit Main","description":"Boots XKit up","developer":"STUDIOXENIX","version":"1.3.4","frame":"false","beta":"false","slow":"false"}